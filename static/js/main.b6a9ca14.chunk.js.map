{"version":3,"sources":["App.tsx","goodsFromServer.tsx","index.tsx"],"names":["SortType","goodsFromServer","id","name","App","useState","sortType","NONE","isReversed","value","setValue","preparedList","goods","visibleGoods","ALPHABET","sort","good1","good2","localeCompare","LENGTH","length","reverse","getReorderedGoods","className","type","onClick","classNames","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAWKA,E,4DCXQC,G,YAAkB,CAC7B,CAAEC,GAAI,EAAGC,KAAM,aACf,CAAED,GAAI,EAAGC,KAAM,UACf,CAAED,GAAI,EAAGC,KAAM,QACf,CAAED,GAAI,EAAGC,KAAM,aACf,CAAED,GAAI,EAAGC,KAAM,SACf,CAAED,GAAI,EAAGC,KAAM,SACf,CAAED,GAAI,EAAGC,KAAM,QACf,CAAED,GAAI,EAAGC,KAAM,SACf,CAAED,GAAI,EAAGC,KAAM,OACf,CAAED,GAAI,GAAIC,KAAM,Y,iBDCbH,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAuCE,IAAMI,EAAgB,WAC3B,MAA0BC,mBAAS,CACjCC,SAAUN,EAASO,KACnBC,YAAY,IAFd,mBAAOC,EAAP,KAAcC,EAAd,KAqBMC,EAlDR,SACEC,EADF,GAGG,IADCN,EACF,EADEA,SAAUE,EACZ,EADYA,WAENK,EAAY,YAAOD,GAEzB,OAAQN,GACN,KAAKN,EAASc,SACZD,EAAaE,MAAK,SAACC,EAAOC,GACxB,OAAOD,EAAMb,KAAKe,cAAcD,EAAMd,SAExC,MAEF,KAAKH,EAASmB,OACZN,EAAaE,MAAK,SAACC,EAAOC,GAAR,OAChBD,EAAMb,KAAKiB,OAASH,EAAMd,KAAKiB,UAUrC,OAJIZ,GACFK,EAAaQ,UAGRR,EAyBcS,CACnBrB,EACAQ,GAGF,OACE,sBAAKc,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLC,QAAS,WAzBff,EAAS,2BAAKD,GAAN,IAAaH,SAAUN,EAASc,aA0BlCS,UAAWG,IACT,iBACA,CAAE,WAAYjB,EAAMH,WAAaN,EAASc,WAL9C,iCAWA,wBACEU,KAAK,SACLC,QAAS,WAhCff,EAAS,2BAAKD,GAAN,IAAaH,SAAUN,EAASmB,WAiClCI,UAAWG,IACT,oBACA,CAAE,WAAYjB,EAAMH,WAAaN,EAASmB,SAL9C,4BAWA,wBACEK,KAAK,SACLC,QAAS,WAvCff,EAAS,2BAAKD,GAAN,IAAaD,YAAaC,EAAMD,eAwClCe,UAAWG,IACT,oBACA,CAAE,YAAajB,EAAMD,aALzB,sBAWEC,EAAMH,WAAaN,EAASO,MAAQE,EAAMD,aAC1C,wBACEgB,KAAK,SACLD,UAAWG,IAAW,iBACpB,CAAE,WAAYjB,EAAMH,WAAaN,EAASO,OAC5CkB,QAAS,WAjDjBf,EAAS,CAAEJ,SAAUN,EAASO,KAAMC,YAAY,KA6C1C,sBAWJ,6BACE,6BACGG,EAAagB,KAAI,SAAAC,GAChB,OACE,oBAAI,UAAQ,OAAZ,SAAkCA,EAAKzB,MAAfyB,EAAK1B,eE9H3C2B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.b6a9ca14.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport { goodsFromServer } from './goodsFromServer';\n\ninterface Good {\n  id: number;\n  name: string;\n}\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\ntype ReorderOptions = {\n  sortType: SortType,\n  isReversed: boolean,\n};\n\nfunction getReorderedGoods(\n  goods: Good[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  const visibleGoods = [...goods];\n\n  switch (sortType) {\n    case SortType.ALPHABET:\n      visibleGoods.sort((good1, good2) => {\n        return good1.name.localeCompare(good2.name);\n      });\n      break;\n\n    case SortType.LENGTH:\n      visibleGoods.sort((good1, good2) => (\n        good1.name.length - good2.name.length));\n      break;\n\n    default: break;\n  }\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\nexport const App: React.FC = () => {\n  const [value, setValue] = useState({\n    sortType: SortType.NONE,\n    isReversed: false,\n  });\n\n  const sortByAlphabet = () => {\n    setValue({ ...value, sortType: SortType.ALPHABET });\n  };\n\n  const sortByLength = () => {\n    setValue({ ...value, sortType: SortType.LENGTH });\n  };\n\n  const reverse = () => {\n    setValue({ ...value, isReversed: !value.isReversed });\n  };\n\n  const reset = () => {\n    setValue({ sortType: SortType.NONE, isReversed: false });\n  };\n\n  const preparedList = getReorderedGoods(\n    goodsFromServer,\n    value,\n  );\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          onClick={() => sortByAlphabet()}\n          className={classNames(\n            'button is-info',\n            { 'is-light': value.sortType !== SortType.ALPHABET },\n          )}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={() => sortByLength()}\n          className={classNames(\n            'button is-success',\n            { 'is-light': value.sortType !== SortType.LENGTH },\n          )}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={() => reverse()}\n          className={classNames(\n            'button is-warning',\n            { 'is-light': !value.isReversed },\n          )}\n        >\n          Reverse\n        </button>\n\n        {(value.sortType !== SortType.NONE || value.isReversed) && (\n          <button\n            type=\"button\"\n            className={classNames('button is-info',\n              { 'is-light': value.sortType !== SortType.NONE })}\n            onClick={() => reset()}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        <ul>\n          {preparedList.map(good => {\n            return (\n              <li data-cy=\"Good\" key={good.id}>{good.name}</li>\n            );\n          })}\n        </ul>\n      </ul>\n    </div>\n  );\n};\n","export const goodsFromServer = [\n  { id: 1, name: 'Dumplings' },\n  { id: 2, name: 'Carrot' },\n  { id: 3, name: 'Eggs' },\n  { id: 4, name: 'Ice cream' },\n  { id: 5, name: 'Apple' },\n  { id: 6, name: 'Bread' },\n  { id: 7, name: 'Fish' },\n  { id: 8, name: 'Honey' },\n  { id: 9, name: 'Jam' },\n  { id: 10, name: 'Garlic' },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}